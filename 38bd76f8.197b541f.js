(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{189:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),p=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,m=d["".concat(i,".").concat(u)]||d[u]||s[u]||o;return n?a.a.createElement(m,l(l({ref:t},b),{},{components:n})):a.a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var b=2;b<o;b++)i[b]=n[b];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),o=(n(0),n(189)),i={},l={unversionedId:"globalMemory",id:"globalMemory",isDocsHomePage:!1,title:"globalMemory",description:"globalMemory is a object with of set of methods which can be used to interact with redis key-value based in-memory database. The only difference between memory and globalMemory is that, globalMemory key-value pairs are accessible throughout bot irrespective of sender id.",source:"@site/docs/globalMemory.md",slug:"/globalMemory",permalink:"/YM-dev-docs/docs/globalMemory",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/globalMemory.md",version:"current",sidebar:"docs",previous:{title:"getTimeStampMessagesLogUrl",permalink:"/YM-dev-docs/docs/getTimeStampMessagesLogUrl"},next:{title:"interactionType",permalink:"/YM-dev-docs/docs/interactionType"}},c=[{value:"set",id:"set",children:[]},{value:"Options",id:"options",children:[]},{value:"example",id:"example",children:[]},{value:"get",id:"get",children:[{value:"Options",id:"options-1",children:[]},{value:"example",id:"example-1",children:[]}]},{value:"delete",id:"delete",children:[{value:"Options",id:"options-2",children:[]},{value:"example",id:"example-2",children:[]}]},{value:"hmset &amp; hdel",id:"hmset--hdel",children:[{value:"example",id:"example-3",children:[]},{value:"example",id:"example-4",children:[]}]}],b={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"globalMemory")," is a object with of set of methods which can be used to interact with redis key-value based in-memory database. The only difference between ",Object(o.b)("inlineCode",{parentName:"p"},"memory")," and ",Object(o.b)("inlineCode",{parentName:"p"},"globalMemory")," is that, globalMemory key-value pairs are accessible throughout bot irrespective of sender id."),Object(o.b)("hr",null),Object(o.b)("h1",{id:"functions"},"Functions"),Object(o.b)("h2",{id:"set"},"set"),Object(o.b)("p",null,"Set data to redis."),Object(o.b)("h2",{id:"options"},"Options"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"key (String) - The key which is used as reference."),Object(o.b)("li",{parentName:"ol"},"value (any) - The value that should be set in redis"),Object(o.b)("li",{parentName:"ol"},"expiry (Number) ",Object(o.b)("em",{parentName:"li"},"optional")," - the expiry time in seconds. by default it will be in memory for 2 days.")),Object(o.b)("p",null,"It return a Promise."),Object(o.b)("h2",{id:"example"},"example"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"app.globalMemory.set(key,value,expiry)\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"get"},"get"),Object(o.b)("p",null,"get data to redis."),Object(o.b)("h3",{id:"options-1"},"Options"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"key (String) - The key which is referring to the data which we want to retrieve from the redis.")),Object(o.b)("p",null,"It return a Promise."),Object(o.b)("h3",{id:"example-1"},"example"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'app.globalMemory.get(key).then(app.log).catch(() => app.log("value not available"))\n')),Object(o.b)("hr",null),Object(o.b)("h2",{id:"delete"},"delete"),Object(o.b)("p",null,"delete a value from redis."),Object(o.b)("h3",{id:"options-2"},"Options"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"key (String) - The key which is referring to the data which we want to delete from the redis.")),Object(o.b)("p",null,"unlike ",Object(o.b)("inlineCode",{parentName:"p"},"set")," and ",Object(o.b)("inlineCode",{parentName:"p"},"get"),", this isn't a async function. do not use ",Object(o.b)("inlineCode",{parentName:"p"},"await"),"."),Object(o.b)("h3",{id:"example-2"},"example"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"app.globalMemory.delete(key)\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"hmset--hdel"},"hmset & hdel"),Object(o.b)("p",null,"These functions are decorators around ",Object(o.b)("inlineCode",{parentName:"p"},"set")," function to mimic hashmap functionality (",Object(o.b)("em",{parentName:"p"},"javascript objects"),")."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"hmset(key, dataKey, dataValue)")," - sets dataValue to dataKey to the object which is being referred by key"),Object(o.b)("h3",{id:"example-3"},"example"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"app.globalMemory.hmset(pincodes,'chennai',600100).then(() => {\n   //your code\n});\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"hdel(key, dataKey)")," - delete dataKey in the object which is being referred by key"),Object(o.b)("h3",{id:"example-4"},"example"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"app.globalMemory.hdel(pincodes,'chennai').then(() => {\n   //your code\n});\n")))}p.isMDXComponent=!0}}]);