(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{125:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var o=t(2),a=t(6),r=(t(0),t(174)),i={},c={unversionedId:"app.prediction",id:"app.prediction",isDocsHomePage:!1,title:"app.prediction",description:"app.prediction",source:"@site/docs/app.prediction.md",slug:"/app.prediction",permalink:"/docs/app.prediction",editUrl:"https://github.com/yellowmessenger/ym-documentation/tree/master/docs/app.prediction.md",version:"current",sidebar:"docs",previous:{title:"app.libraryStartTime",permalink:"/docs/app.libraryStartTime"},next:{title:"app.predictionEndTime",permalink:"/docs/app.predictionEndTime"}},l=[{value:"Arrays",id:"arrays",children:[{value:"global_entities",id:"global_entities",children:[]}]},{value:"Objects",id:"objects",children:[{value:"intents",id:"intents",children:[]},{value:"parser",id:"parser",children:[]},{value:"entities",id:"entities",children:[]},{value:"global_model",id:"global_model",children:[]}]},{value:"Properties",id:"properties",children:[{value:"core | <code>boolean</code>",id:"core--boolean",children:[]},{value:"language_detected | <code>string</code>",id:"language_detected--string",children:[]},{value:"sentiment | <code>string</code>",id:"sentiment--string",children:[]},{value:"text | <code>string</code>",id:"text--string",children:[]},{value:"confidence | <code>int</code>",id:"confidence--int",children:[]},{value:"synonym_detected | <code>boolean</code>",id:"synonym_detected--boolean",children:[]},{value:"intent | <code>string</code>",id:"intent--string",children:[]}]}],p={rightToc:l};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"appprediction"},"app.prediction"),Object(r.b)("p",null,"This object contains all the predicted information from the data entered\nby the user"),Object(r.b)("p",null," Typical\nprediction object"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'{\n  core: false,\n  intents: {\n    weather-report: 0.3,\n    trigger1: 0.111,\n    trigger2: 0.123,\n    get-function-data: 0.381\n  },\n  language_detected: "en",\n  sentiment: "neutral",\n  text: "i want to book movie tickets for tomorrow",\n  parser: {\n    noun_chunks: [\n      {\n        dep: "nsubj",\n        chunk: "i",\n        root_text: "want",\n        tag: "PRP",\n        pos: "PRON"\n      },\n      {\n        dep: "dobj",\n        chunk: "movie tickets",\n        root_text: "book",\n        tag: "NNS",\n        pos: "NOUN"\n      },\n      {\n        dep: "pobj",\n        chunk: "tomorrow",\n        root_text: "for",\n        tag: "NN",\n        pos: "NOUN"\n      }\n    ],\n    lemmas: [\n      "want",\n      "book",\n      "movie",\n      "ticket",\n      "tomorrow"\n    ],\n    sentences: [\n      "i want to book movie tickets for tomorrow"\n    ],\n    tokens: [\n      {\n        text: "i",\n        pos: "PRON",\n        lemma: "i"\n      },\n      {\n        text: "want",\n        pos: "VERB",\n        lemma: "want"\n      },\n      {\n        text: "to",\n        pos: "PART",\n        lemma: "to"\n      },\n      {\n        text: "book",\n        pos: "VERB",\n        lemma: "book"\n      },\n      {\n        text: "movie",\n        pos: "NOUN",\n        lemma: "movie"\n      },\n      {\n        text: "tickets",\n        pos: "NOUN",\n        lemma: "ticket"\n      },\n      {\n        text: "for",\n        pos: "ADP",\n        lemma: "for"\n      },\n      {\n        text: "tomorrow",\n        pos: "NOUN",\n        lemma: "tomorrow"\n      }\n    ],\n    entities: [\n      {\n        text: "Tomorrow",\n        label: "DATE"\n      }\n    ],\n    other_keywords: [\n      {\n        text: "want",\n        pos: "VERB",\n        lemma: "want"\n      },\n      {\n        text: "book",\n        pos: "VERB",\n        lemma: "book"\n      },\n      {\n        text: "movie",\n        pos: "NOUN",\n        lemma: "movie"\n      },\n      {\n        text: "tickets",\n        pos: "NOUN",\n        lemma: "ticket"\n      },\n      {\n        text: "tomorrow",\n        pos: "NOUN",\n        lemma: "tomorrow"\n      }\n    ],\n    parsed_tree: [\n      {\n        head_pos: 100,\n        dep: "nsubj",\n        text: "i",\n        pos: "PRON",\n        head_text: "want",\n        children: []\n      },\n      {\n        head_pos: 100,\n        dep: "ROOT",\n        text: "want",\n        pos: "VERB",\n        head_text: "want",\n        children: [\n          "i",\n          "book"\n        ]\n      },\n      {\n        head_pos: 100,\n        dep: "aux",\n        text: "to",\n        pos: "PART",\n        head_text: "book",\n        children: []\n      },\n      {\n        head_pos: 100,\n        dep: "xcomp",\n        text: "book",\n        pos: "VERB",\n        head_text: "want",\n        children: [\n          "to",\n          "tickets",\n          "for"\n        ]\n      },\n      {\n        head_pos: 92,\n        dep: "compound",\n        text: "movie",\n        pos: "NOUN",\n        head_text: "tickets",\n        children: []\n      },\n      {\n        head_pos: 100,\n        dep: "dobj",\n        text: "tickets",\n        pos: "NOUN",\n        head_text: "book",\n        children: [\n          "movie"\n        ]\n      },\n      {\n        head_pos: 100,\n        dep: "prep",\n        text: "for",\n        pos: "ADP",\n        head_text: "book",\n        children: [\n          "tomorrow"\n        ]\n      },\n      {\n        head_pos: 85,\n        dep: "pobj",\n        text: "tomorrow",\n        pos: "NOUN",\n        head_text: "for",\n        children: []\n      }\n    ],\n    lemma_list: [\n      {\n        lemma: "want",\n        pos: "VERB",\n        text: "want"\n      },\n      {\n        lemma: "book",\n        pos: "VERB",\n        text: "book"\n      },\n      {\n        lemma: "movie",\n        pos: "NOUN",\n        text: "movie"\n      },\n      {\n        lemma: "ticket",\n        pos: "NOUN",\n        text: "tickets"\n      },\n      {\n        lemma: "tomorrow",\n        pos: "NOUN",\n        text: "tomorrow"\n      }\n    ]\n  },\n  confidence: 0.381,\n  global_entities: [\n    {\n      text: "Tomorrow",\n      label: "DATE"\n    }\n  ],\n  entities: {\n    date: [\n      {\n        text: "tomorrow",\n        value: {\n          grain: "day",\n          value: "2020-01-30T00:00:00.000Z",\n          others: [\n            {\n              grain: "day",\n              value: "2020-01-30T00:00:00.000Z"\n            }\n          ]\n        }\n      }\n    ]\n  },\n  synonym_detected: false,\n  intent: "get-function-data",\n  global_model: {\n    confidence: 0.5346315503120422,\n    intent: "what"\n  },\n  response: {}\n}\n')),Object(r.b)("h2",{id:"arrays"},"Arrays"),Object(r.b)("h3",{id:"global_entities"},"global_entities"),Object(r.b)("p",null,"This array contains global entity objects"),Object(r.b)("h4",{id:"example"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'global_entities: [\n      {\n        text: "Tomorrow",\n        label: "DATE"\n      }\n]\n')),Object(r.b)("hr",null),Object(r.b)("h2",{id:"objects"},"Objects"),Object(r.b)("h3",{id:"intents"},"intents"),Object(r.b)("p",null,"This object contains all the predicted intents (matched intents)"),Object(r.b)("h4",{id:"example-1"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'"intents": {\n      weather-report: 0.3,\n      trigger1: 0.111,\n      trigger2: 0.123,\n      get-function-data: 0.381\n}\n')),Object(r.b)("hr",null),Object(r.b)("h3",{id:"parser"},"parser"),Object(r.b)("p",null,"This object contains parsed data i.e. ",Object(r.b)("inlineCode",{parentName:"p"},"noun_chunks"),", ",Object(r.b)("inlineCode",{parentName:"p"},"lemmas"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"sentence"),", ",Object(r.b)("inlineCode",{parentName:"p"},"tokens"),", ",Object(r.b)("inlineCode",{parentName:"p"},"entities"),", ",Object(r.b)("inlineCode",{parentName:"p"},"other_keywords"),", ",Object(r.b)("inlineCode",{parentName:"p"},"parsed_tree"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"lemma_list"),","),Object(r.b)("h4",{id:"example-2"},"example"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"I ",Object(r.b)("em",{parentName:"p"},"want to book movie tickets for tomorrow"))),Object(r.b)("p",null," parser\nobject"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'parser: {\n      noun_chunks: [\n        {\n          dep: "nsubj",\n          chunk: "i",\n          root_text: "want",\n          tag: "PRP",\n          pos: "PRON"\n        },\n        {\n          dep: "dobj",\n          chunk: "movie tickets",\n          root_text: "book",\n          tag: "NNS",\n          pos: "NOUN"\n        },\n        {\n          dep: "pobj",\n          chunk: "tomorrow",\n          root_text: "for",\n          tag: "NN",\n          pos: "NOUN"\n        }\n      ],\n      lemmas: [\n        "want",\n        "book",\n        "movie",\n        "ticket",\n        "tomorrow"\n      ],\n      sentences: [\n        "i want to book movie tickets for tomorrow"\n      ],\n      tokens: [\n        {\n          text: "i",\n          pos: "PRON",\n          lemma: "i"\n        },\n        {\n          text: "want",\n          pos: "VERB",\n          lemma: "want"\n        },\n        {\n          text: "to",\n          pos: "PART",\n          lemma: "to"\n        },\n        {\n          text: "book",\n          pos: "VERB",\n          lemma: "book"\n        },\n        {\n          text: "movie",\n          pos: "NOUN",\n          lemma: "movie"\n        },\n        {\n          text: "tickets",\n          pos: "NOUN",\n          lemma: "ticket"\n        },\n        {\n          text: "for",\n          pos: "ADP",\n          lemma: "for"\n        },\n        {\n          text: "tomorrow",\n          pos: "NOUN",\n          lemma: "tomorrow"\n        }\n      ],\n      entities: [\n        {\n          text: "Tomorrow",\n          label: "DATE"\n        }\n      ],\n      other_keywords: [\n        {\n          text: "want",\n          pos: "VERB",\n          lemma: "want"\n        },\n        {\n          text: "book",\n          pos: "VERB",\n          lemma: "book"\n        },\n        {\n          text: "movie",\n          pos: "NOUN",\n          lemma: "movie"\n        },\n        {\n          text: "tickets",\n          pos: "NOUN",\n          lemma: "ticket"\n        },\n        {\n          text: "tomorrow",\n          pos: "NOUN",\n          lemma: "tomorrow"\n        }\n      ],\n      parsed_tree: [\n        {\n          head_pos: 100,\n          dep: "nsubj",\n          text: "i",\n          pos: "PRON",\n          head_text: "want",\n          children: []\n        },\n        {\n          head_pos: 100,\n          dep: "ROOT",\n          text: "want",\n          pos: "VERB",\n          head_text: "want",\n          children: [\n            "i",\n            "book"\n          ]\n        },\n        {\n          head_pos: 100,\n          dep: "aux",\n          text: "to",\n          pos: "PART",\n          head_text: "book",\n          children: []\n        },\n        {\n          head_pos: 100,\n          dep: "xcomp",\n          text: "book",\n          pos: "VERB",\n          head_text: "want",\n          children: [\n            "to",\n            "tickets",\n            "for"\n          ]\n        },\n        {\n          head_pos: 92,\n          dep: "compound",\n          text: "movie",\n          pos: "NOUN",\n          head_text: "tickets",\n          children: []\n        },\n        {\n          head_pos: 100,\n          dep: "dobj",\n          text: "tickets",\n          pos: "NOUN",\n          head_text: "book",\n          children: [\n            "movie"\n          ]\n        },\n        {\n          head_pos: 100,\n          dep: "prep",\n          text: "for",\n          pos: "ADP",\n          head_text: "book",\n          children: [\n            "tomorrow"\n          ]\n        },\n        {\n          head_pos: 85,\n          dep: "pobj",\n          text: "tomorrow",\n          pos: "NOUN",\n          head_text: "for",\n          children: []\n        }\n      ],\n      lemma_list: [\n        {\n          lemma: "want",\n          pos: "VERB",\n          text: "want"\n        },\n        {\n          lemma: "book",\n          pos: "VERB",\n          text: "book"\n        },\n        {\n          lemma: "movie",\n          pos: "NOUN",\n          text: "movie"\n        },\n        {\n          lemma: "ticket",\n          pos: "NOUN",\n          text: "tickets"\n        },\n        {\n          lemma: "tomorrow",\n          pos: "NOUN",\n          text: "tomorrow"\n        }\n      ]\n    }\n')),Object(r.b)("hr",null),Object(r.b)("h3",{id:"entities"},"entities"),Object(r.b)("p",null,"This object contains entities trained for matching and global entities\nlike date, city, etc.."),Object(r.b)("h4",{id:"example-3"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'entities: {\n      date: [\n        {\n          text: "tomorrow",\n          value: {\n            grain: "day",\n            value: "2020-01-30T00:00:00.000Z",\n            others: [\n              {\n                grain: "day",\n                value: "2020-01-30T00:00:00.000Z"\n              }\n            ]\n          }\n        }\n      ]\n}\n')),Object(r.b)("hr",null),Object(r.b)("h3",{id:"global_model"},"global_model"),Object(r.b)("p",null,"This object contains confidence and intent values"),Object(r.b)("h4",{id:"example-4"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'global_model: {\n      confidence: 0.5346315503120422,\n      intent: "what"\n}\n')),Object(r.b)("hr",null),Object(r.b)("h2",{id:"properties"},"Properties"),Object(r.b)("h3",{id:"core--boolean"},"core ","|"," ",Object(r.b)("inlineCode",{parentName:"h3"},"boolean")),Object(r.b)("p",null,"Has the boolean value"),Object(r.b)("h4",{id:"example-5"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'"core" : false\n')),Object(r.b)("hr",null),Object(r.b)("h3",{id:"language_detected--string"},"language_detected ","|"," ",Object(r.b)("inlineCode",{parentName:"h3"},"string")),Object(r.b)("p",null,"Has the value of detected language code"),Object(r.b)("h4",{id:"example-6"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'"language_detected": "en"\n')),Object(r.b)("hr",null),Object(r.b)("h3",{id:"sentiment--string"},"sentiment ","|"," ",Object(r.b)("inlineCode",{parentName:"h3"},"string")),Object(r.b)("p",null,"Has the sentiment value of entered text i.e. ",Object(r.b)("inlineCode",{parentName:"p"},"positive"),", ",Object(r.b)("inlineCode",{parentName:"p"},"negative")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"neutral"),"."),Object(r.b)("h4",{id:"example-7"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'"sentiment": "neutral"\n')),Object(r.b)("hr",null),Object(r.b)("h3",{id:"text--string"},"text ","|"," ",Object(r.b)("inlineCode",{parentName:"h3"},"string")),Object(r.b)("p",null,"Has the value of exact text entered by the user"),Object(r.b)("h4",{id:"example-8"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'"text": "i want to book movie tickets for tomorrow"\n')),Object(r.b)("hr",null),Object(r.b)("h3",{id:"confidence--int"},"confidence ","|"," ",Object(r.b)("inlineCode",{parentName:"h3"},"int")),Object(r.b)("p",null,"Has the max value of confidence among matched intents"),Object(r.b)("h4",{id:"example-9"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'"confidence": 0.381\n')),Object(r.b)("hr",null),Object(r.b)("h3",{id:"synonym_detected--boolean"},"synonym_detected ","|"," ",Object(r.b)("inlineCode",{parentName:"h3"},"boolean")),Object(r.b)("p",null,"Has the boolean value about synonyms detected or not"),Object(r.b)("h4",{id:"example-10"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'"synonym_detected": false\n')),Object(r.b)("hr",null),Object(r.b)("h3",{id:"intent--string"},"intent ","|"," ",Object(r.b)("inlineCode",{parentName:"h3"},"string")),Object(r.b)("p",null,"Has the slug name of highest confidence intent matched"),Object(r.b)("h4",{id:"example-11"},"example"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-java"}),'"intent": "get-function-data"\n')),Object(r.b)("hr",null))}b.isMDXComponent=!0},174:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return u}));var o=t(0),a=t.n(o);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=a.a.createContext({}),b=function(e){var n=a.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=b(e.components);return a.a.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=b(t),m=o,u=d["".concat(i,".").concat(m)]||d[m]||s[m]||r;return t?a.a.createElement(u,c(c({ref:n},p),{},{components:t})):a.a.createElement(u,c({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<r;p++)i[p]=t[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);