(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{146:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),i=(n(0),n(189)),o={},c={unversionedId:"memory",id:"memory",isDocsHomePage:!1,title:"memory",description:"memory is a object with of set of methods which can be used to interact with redis key-value based in-memory database. The only difference between memory and globalMemory is that, memory key-value pairs are sender-id specific but it's bot specific in globalMemory scenario.",source:"@site/docs/memory.md",slug:"/memory",permalink:"/YM-dev-docs/docs/memory",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/memory.md",version:"current",sidebar:"docs",previous:{title:"memory.get",permalink:"/YM-dev-docs/docs/memory.get"},next:{title:"moment",permalink:"/YM-dev-docs/docs/moment"}},l=[{value:"set",id:"set",children:[]},{value:"Options",id:"options",children:[]},{value:"example",id:"example",children:[]},{value:"get",id:"get",children:[{value:"Options",id:"options-1",children:[]},{value:"example",id:"example-1",children:[]}]},{value:"delete",id:"delete",children:[{value:"Options",id:"options-2",children:[]},{value:"example",id:"example-2",children:[]}]},{value:"hmset &amp; hdel",id:"hmset--hdel",children:[{value:"example",id:"example-3",children:[]},{value:"example",id:"example-4",children:[]}]}],b={rightToc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"memory")," is a object with of set of methods which can be used to interact with redis key-value based in-memory database. The only difference between ",Object(i.b)("inlineCode",{parentName:"p"},"memory")," and ",Object(i.b)("inlineCode",{parentName:"p"},"globalMemory")," is that, ",Object(i.b)("inlineCode",{parentName:"p"},"memory")," key-value pairs are sender-id specific but it's bot specific in ",Object(i.b)("inlineCode",{parentName:"p"},"globalMemory")," scenario."),Object(i.b)("hr",null),Object(i.b)("h1",{id:"functions"},"Functions"),Object(i.b)("h2",{id:"set"},"set"),Object(i.b)("p",null,"Set data to redis."),Object(i.b)("h2",{id:"options"},"Options"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"key (String) - The key which is used as reference."),Object(i.b)("li",{parentName:"ol"},"value (any) - The value that should be set in redis"),Object(i.b)("li",{parentName:"ol"},"expiry (Number) ",Object(i.b)("em",{parentName:"li"},"optional")," - the expiry time in seconds. by default it will be in memory for 2 days.")),Object(i.b)("p",null,"It return a Promise."),Object(i.b)("h2",{id:"example"},"example"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"app.memory.set(key,value,expiry)\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"get"},"get"),Object(i.b)("p",null,"get data to redis."),Object(i.b)("h3",{id:"options-1"},"Options"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"key (String) - The key which is referring to the data which we want to retrieve from the redis.")),Object(i.b)("p",null,"It return a Promise."),Object(i.b)("h3",{id:"example-1"},"example"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),'app.memory.get(key).then(app.log).catch(() => app.log("value not available"))\n')),Object(i.b)("hr",null),Object(i.b)("h2",{id:"delete"},"delete"),Object(i.b)("p",null,"delete a value from redis."),Object(i.b)("h3",{id:"options-2"},"Options"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"key (String) - The key which is referring to the data which we want to delete from the redis.")),Object(i.b)("p",null,"unlike ",Object(i.b)("inlineCode",{parentName:"p"},"set")," and ",Object(i.b)("inlineCode",{parentName:"p"},"get"),", this isn't a async function. do not use ",Object(i.b)("inlineCode",{parentName:"p"},"await"),"."),Object(i.b)("h3",{id:"example-2"},"example"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"app.memory.delete(key)\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"hmset--hdel"},"hmset & hdel"),Object(i.b)("p",null,"These functions are decorators around ",Object(i.b)("inlineCode",{parentName:"p"},"set")," function to mimic hashmap functionality (",Object(i.b)("em",{parentName:"p"},"javascript objects"),")."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"hmset(key, dataKey, dataValue)")," - sets dataValue to dataKey to the object which is being referred by key"),Object(i.b)("h3",{id:"example-3"},"example"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"app.memory.hmset(pincodes,'chennai',600100).then(() => {\n   //your code\n});\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"hdel(key, dataKey)")," - delete dataKey in the object which is being referred by key"),Object(i.b)("h3",{id:"example-4"},"example"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"app.memory.hdel(pincodes,'chennai').then(() => {\n   //your code\n});\n")))}p.isMDXComponent=!0},189:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),p=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},s=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),d=p(n),s=r,u=d["".concat(o,".").concat(s)]||d[s]||m[s]||i;return n?a.a.createElement(u,c(c({ref:t},b),{},{components:n})):a.a.createElement(u,c({ref:t},b))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=s;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var b=2;b<i;b++)o[b]=n[b];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);